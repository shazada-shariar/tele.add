import base64
exec(base64.b64decode('ZnJvbSB0ZWxldGhvbi5zeW5jIGltcG9ydCBUZWxlZ3JhbUNsaWVudApmcm9tIHRlbGV0aG9uLnRsLmZ1bmN0aW9ucy5tZXNzYWdlcyBpbXBvcnQgR2V0RGlhbG9nc1JlcXVlc3QKZnJvbSB0ZWxldGhvbi50bC50eXBlcyBpbXBvcnQgSW5wdXRQZWVyRW1wdHksIElucHV0UGVlckNoYW5uZWwsIElucHV0UGVlclVzZXIKZnJvbSB0ZWxldGhvbi5lcnJvcnMucnBjZXJyb3JsaXN0IGltcG9ydCBQZWVyRmxvb2RFcnJvciwgVXNlclByaXZhY3lSZXN0cmljdGVkRXJyb3IKZnJvbSB0ZWxldGhvbi50bC5mdW5jdGlvbnMuY2hhbm5lbHMgaW1wb3J0IEludml0ZVRvQ2hhbm5lbFJlcXVlc3QKaW1wb3J0IGNvbmZpZ3BhcnNlcgppbXBvcnQgb3MKaW1wb3J0IHN5cwppbXBvcnQgY3N2CmltcG9ydCB0cmFjZWJhY2sKaW1wb3J0IHRpbWUKaW1wb3J0IHJhbmRvbQoKcmU9IlwwMzNbMTszMW0iCmdyPSJcMDMzWzE7MzJtIgpjeT0iXDAzM1sxOzM2bSIKCnByaW50IChyZSsiIDo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6OiIpCnByaW50IChncisiIDo6ICAgICAgICAgICAgICBTICBVICBMICBUIEEgTiAgICAgICAgICA6OiIpCnByaW50IChyZSsiIDo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6Ojo6OiIpCgpwcmludCAoY3krInZlcnNpb24gOiAxLjAxIikKcHJpbnQgKGN5KyJUSElTIFNDUklQVCBDQVJFVEVEIEJZIFNVTFRBTiBTSEFSSUFSIikKcHJpbnQgKGN5KyJTSEFaQURBIFNIQVJJQVIiKQoKcHJpbnQgKHJlKyJOT1RFIDoiKQpwcmludCAoIjEuIFRlbGVncmFtIG9ubHkgYWxsb3cgdG8gYWRkIDIwMCBtZW1iZXJzIGluIGdyb3VwIGJ5IG9uZSB1c2VyLiIpCnByaW50ICgiMi4gWW91IGNhbiBVc2UgbXVsdGlwbGUgVGVsZWdyYW0gYWNjb3VudHMgZm9yIGFkZCBtb3JlIG1lbWJlcnMuIikKcHJpbnQgKCIzLiBBZGQgb25seSA1MCBtZW1iZXJzIGluIGdyb3VwIGVhY2ggdGltZSBvdGhlcndpc2UgeW91IHdpbGwgZ2V0IGZsb29kIGVycm9yLiIpCnByaW50ICgiNC4gVGhlbiB3YWl0IGZvciAxNS0zMCBtaW5pdXRlIHRoZW4gYWRkIG1lbWJlcnMgYWdhaW4uIikKcHJpbnQgKCI1LiBNYWtlIHN1cmUgeW91IGVuYWJsZSBBZGQgVXNlciBQZXJtaXNzaW9uIGluIHlvdXIgZ3JvdXAiKQoKY3Bhc3MgPSBjb25maWdwYXJzZXIuUmF3Q29uZmlnUGFyc2VyKCkKY3Bhc3MucmVhZCgnY29uZmlnLmRhdGEnKQoKdHJ5OgogICAgYXBpX2lkID0gY3Bhc3NbJ2NyZWQnXVsnaWQnXQogICAgYXBpX2hhc2ggPSBjcGFzc1snY3JlZCddWydoYXNoJ10KICAgIHBob25lID0gY3Bhc3NbJ2NyZWQnXVsncGhvbmUnXQogICAgY2xpZW50ID0gVGVsZWdyYW1DbGllbnQocGhvbmUsIGFwaV9pZCwgYXBpX2hhc2gpCmV4Y2VwdCBLZXlFcnJvcjoKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgYmFubmVyKCkKICAgIHByaW50KHJlKyJbIV0gcnVuIHB5dGhvbiBzZXR1cC5weSBmaXJzdCAhIVxuIikKICAgIHN5cy5leGl0KDEpCgpjbGllbnQuY29ubmVjdCgpCmlmIG5vdCBjbGllbnQuaXNfdXNlcl9hdXRob3JpemVkKCk6CiAgICBjbGllbnQuc2VuZF9jb2RlX3JlcXVlc3QocGhvbmUpCiAgICBvcy5zeXN0ZW0oJ2NsZWFyJykKICAgIGJhbm5lcigpCiAgICBjbGllbnQuc2lnbl9pbihwaG9uZSwgaW5wdXQoZ3IrJ1srXSBFbnRlciB0aGUgY29kZTogJytyZSkpCgp1c2VycyA9IFtdCndpdGggb3BlbihyIm1lbWJlcnMuY3N2IiwgZW5jb2Rpbmc9J1VURi04JykgYXMgZjogICNFbnRlciB5b3VyIGZpbGUgbmFtZQogICAgcm93cyA9IGNzdi5yZWFkZXIoZixkZWxpbWl0ZXI9IiwiLGxpbmV0ZXJtaW5hdG9yPSJcbiIpCiAgICBuZXh0KHJvd3MsIE5vbmUpCiAgICBmb3Igcm93IGluIHJvd3M6CiAgICAgICAgdXNlciA9IHt9CiAgICAgICAgdXNlclsndXNlcm5hbWUnXSA9IHJvd1swXQogICAgICAgIHVzZXJbJ2lkJ10gPSBpbnQocm93WzFdKQogICAgICAgIHVzZXJbJ2FjY2Vzc19oYXNoJ10gPSBpbnQocm93WzJdKQogICAgICAgIHVzZXJbJ25hbWUnXSA9IHJvd1szXQogICAgICAgIHVzZXJzLmFwcGVuZCh1c2VyKQoKY2hhdHMgPSBbXQpsYXN0X2RhdGUgPSBOb25lCmNodW5rX3NpemUgPSAyMDAKZ3JvdXBzID0gW10KCnJlc3VsdCA9IGNsaWVudChHZXREaWFsb2dzUmVxdWVzdCgKICAgIG9mZnNldF9kYXRlPWxhc3RfZGF0ZSwKICAgIG9mZnNldF9pZD0wLAogICAgb2Zmc2V0X3BlZXI9SW5wdXRQZWVyRW1wdHkoKSwKICAgIGxpbWl0PWNodW5rX3NpemUsCiAgICBoYXNoPTAKKSkKY2hhdHMuZXh0ZW5kKHJlc3VsdC5jaGF0cykKCmZvciBjaGF0IGluIGNoYXRzOgogICAgdHJ5OgogICAgICAgIGlmIGNoYXQubWVnYWdyb3VwID09IFRydWU6CiAgICAgICAgICAgIGdyb3Vwcy5hcHBlbmQoY2hhdCkKICAgIGV4Y2VwdDoKICAgICAgICBjb250aW51ZQoKcHJpbnQoZ3IrJ0Nob29zZSBhIGdyb3VwIHRvIGFkZCBtZW1iZXJzOicrY3kpCmkgPSAwCmZvciBncm91cCBpbiBncm91cHM6CiAgICBwcmludChzdHIoaSkgKyAnLSAnICsgZ3JvdXAudGl0bGUpCiAgICBpICs9IDEKCmdfaW5kZXggPSBpbnB1dChncisiRW50ZXIgYSBOdW1iZXI6ICIrcmUpCnRhcmdldF9ncm91cCA9IGdyb3Vwc1tpbnQoZ19pbmRleCldCgp0YXJnZXRfZ3JvdXBfZW50aXR5ID0gSW5wdXRQZWVyQ2hhbm5lbCh0YXJnZXRfZ3JvdXAuaWQsIHRhcmdldF9ncm91cC5hY2Nlc3NfaGFzaCkKCm1vZGUgPSBpbnQoaW5wdXQoZ3IrIkVudGVyIDEgdG8gYWRkIGJ5IHVzZXJuYW1lIG9yIDIgdG8gYWRkIGJ5IElEOiAiK2N5KSkKCm4gPSAwCgpmb3IgdXNlciBpbiB1c2VyczoKICAgIG4gKz0gMQogICAgaWYgbiAlIDgwID09IDA6CiAgICAgICAgc2xlZXAoNjApCiAgICB0cnk6CiAgICAgICAgcHJpbnQoIkFkZGluZyB7fSIuZm9ybWF0KHVzZXJbJ2lkJ10pKQogICAgICAgIGlmIG1vZGUgPT0gMToKICAgICAgICAgICAgaWYgdXNlclsndXNlcm5hbWUnXSA9PSAiIjoKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIHVzZXJfdG9fYWRkID0gY2xpZW50LmdldF9pbnB1dF9lbnRpdHkodXNlclsndXNlcm5hbWUnXSkKICAgICAgICBlbGlmIG1vZGUgPT0gMjoKICAgICAgICAgICAgdXNlcl90b19hZGQgPSBJbnB1dFBlZXJVc2VyKHVzZXJbJ2lkJ10sIHVzZXJbJ2FjY2Vzc19oYXNoJ10pCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc3lzLmV4aXQoIkludmFsaWQgTW9kZSBTZWxlY3RlZC4gUGxlYXNlIFRyeSBBZ2Fpbi4iKQogICAgICAgIGNsaWVudChJbnZpdGVUb0NoYW5uZWxSZXF1ZXN0KHRhcmdldF9ncm91cF9lbnRpdHksIFt1c2VyX3RvX2FkZF0pKQogICAgICAgIHByaW50KCJXYWl0aW5nIGZvciA2MC0xODAgU2Vjb25kcy4uLiIpCiAgICAgICAgdGltZS5zbGVlcChyYW5kb20ucmFuZHJhbmdlKDAsIDUpKQogICAgZXhjZXB0IFBlZXJGbG9vZEVycm9yOgogICAgICAgIHByaW50KCJHZXR0aW5nIEZsb29kIEVycm9yIGZyb20gdGVsZWdyYW0uIFNjcmlwdCBpcyBzdG9wcGluZyBub3cuIFBsZWFzZSB0cnkgYWdhaW4gYWZ0ZXIgc29tZSB0aW1lLiIpCiAgICAgICAgcHJpbnQoIldhaXRpbmcge30gc2Vjb25kcyIuZm9ybWF0KFNMRUVQX1RJTUVfMikpCiAgICAgICAgdGltZS5zbGVlcChTTEVFUF9USU1FXzIpCiAgICBleGNlcHQgVXNlclByaXZhY3lSZXN0cmljdGVkRXJyb3I6CiAgICAgICAgcHJpbnQoIlRoZSB1c2VyJ3MgcHJpdmFjeSBzZXR0aW5ncyBkbyBub3QgYWxsb3cgeW91IHRvIGRvIHRoaXMuIFNraXBwaW5nLiIpCiAgICAgICAgcHJpbnQoIldhaXRpbmcgZm9yIDUgU2Vjb25kcy4uLiIpCiAgICAgICAgdGltZS5zbGVlcChyYW5kb20ucmFuZHJhbmdlKDAsIDUpKQogICAgZXhjZXB0OgogICAgICAgIHRyYWNlYmFjay5wcmludF9leGMoKQogICAgICAgIHByaW50KCJVbmV4cGVjdGVkIEVycm9yIikKICAgICAgICBjb250aW51ZQo='))